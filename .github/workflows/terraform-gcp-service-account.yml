name: Terraform GCP Pipeline
on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop
env:
  TF_VERSION: "1.8.5"  # Latest stable terraform version
  GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  REGION: ${{ secrets.REGION }}

jobs:
  # Stage 1 : initialization terraform, GCP authentication
  init:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write  # OIDC authentication avec GCP

    steps:
      # Check out github repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set-up terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      # Authentication avec GCP en utilisant OIDC (méthode recommandée pour la sécurité)
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ env.GOOGLE_CREDENTIALS }}
          project_id: ${{ env.PROJECT_ID }}

      # Set up Google Cloud CLI
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ env.GOOGLE_CREDENTIALS }}
          export_default_credentials: true        
          
      # Ecraser terraform variables avec les github secrets
      - name: Set Terraform variables
        run: |
          echo "project_id = \"${{ env.PROJECT_ID }}\"" >> terraform/terraform.tfvars
          echo "region = \"${{ env.REGION }}\"" >> terraform/terraform.tfvars

      # Init Terraform
      - name: Terraform Init
        working-directory: terraform
        run: terraform init
      
      # Save terraform init state
      - name: Save Terraform init status
        run: echo "init_success=true" >> $GITHUB_ENV
    outputs:
      init_success: ${{ env.init_success }}

  # Stage 2: terraform plan, apply
  create-service-account:
    runs-on: ubuntu-latest
    needs: init
    if: needs.init.outputs.init_success == 'true'
    steps:
      # Terraform Plan (Dry-Run terraform en mode test) 
      - name: Terraform Plan
        working-directory: terraform
        run: terraform plan -out=tfplan

      # Terraform Apply (déploiement quand push sur la branche develop)
      - name: Terraform Apply
        if: github.event_name == 'push'
        working-directory: terraform
        run: terraform apply -auto-approve tfplan